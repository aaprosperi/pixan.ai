export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { geminiApiKey, content, title = 'Análisis Multi-IA', queryType = 'general' } = req.body;

  if (!geminiApiKey) {
    return res.status(400).json({ error: 'Gemini API key is required' });
  }

  if (!content) {
    return res.status(400).json({ error: 'Content is required' });
  }

  try {
    // Prompt especializado para que Gemini genere HTML estructurado para Google Docs
    const documentPrompt = `Eres un experto en creación de documentos profesionales. Toma esta respuesta consolidada de múltiples IAs y genera un documento HTML estructurado que se pueda importar a Google Docs.

CONTENIDO A PROCESAR:
${content}

INSTRUCCIONES CRÍTICAS:
1. Crea un documento HTML completo y profesional
2. Incluye un título principal atractivo
3. Estructura el contenido con secciones claras usando encabezados H2, H3
4. Crea tablas cuando sea apropiado para organizar información comparativa
5. Usa listas con viñetas para puntos clave
6. Incluye un resumen ejecutivo al inicio si el contenido es extenso
7. Agrega una sección de conclusiones al final
8. Usa estilos inline básicos (colores, negritas, cursivas)
9. Adapta la estructura según el tipo de consulta: ${queryType}

FORMATO DE SALIDA:
- Documento HTML completo con <html>, <head>, <body>
- Título del documento: "${title}"
- Meta descripción apropiada
- Estilos CSS inline para un formato profesional
- Tablas HTML para comparaciones o datos estructurados
- Encabezados jerárquicos apropiados
- Footer con "Generado por LLM Colaborativa - Pixan.ai"

TIPOS DE ESTRUCTURA SEGÚN CONSULTA:
- Técnica: Tablas de especificaciones, secciones de implementación
- Creativa: Secciones de conceptos, tablas de ideas, cronogramas
- Analítica: Tablas comparativas, gráficos de datos, conclusiones
- Investigación: Referencias, tablas de hallazgos, metodología

Genera ÚNICAMENTE el código HTML completo, sin explicaciones adicionales.`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash-exp:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: documentPrompt
          }]
        }],
        generationConfig: {
          temperature: 0.3,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
        }
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      return res.status(response.status).json({ 
        error: `Gemini API Error: ${errorData.error?.message || 'Unknown error'}` 
      });
    }

    const data = await response.json();
    const htmlContent = data.candidates[0]?.content?.parts[0]?.text;

    if (!htmlContent) {
      return res.status(500).json({ error: 'No HTML content generated by Gemini' });
    }

    // Crear un blob URL para descargar el archivo HTML
    const fileName = `${title.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}.html`;
    
    return res.status(200).json({ 
      htmlContent,
      fileName,
      downloadUrl: `data:text/html;charset=utf-8,${encodeURIComponent(htmlContent)}`,
      success: true
    });

  } catch (error) {
    console.error('Google Docs Generation Error:', error);
    return res.status(500).json({ 
      error: `Document generation failed: ${error.message}` 
    });
  }
}